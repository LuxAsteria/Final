def wavepacket():
    x=np.arange(0,1,0.0005)
    x_0=0.4
    c=25
    sigma_sqr=pow(10,-3)
    dx=0.0005
    dt=0.2
    k_0=500
    wave_real=[]
    wave_img=[]
    wave_c=[]
    j=sqrt(-1)
    for i in x:
        wave_i=c*pow(e,-(i-x_0)**2/sigma_sqr)*pow(e,i*k_0*j)
        w_r=c*pow(e,-(i-x_0)**2/sigma_sqr)*cos(i*k_0)
        w_i=c*pow(e,-(i-x_0)**2/sigma_sqr)*sin(i*k_0)
        wave_real.append(w_r)
        wave_img.append(w_i)
        wave_c.append(np.conj(wave_i)*wave_i)
    return wave_real,wave_img,wave_c
wave_r=wavepacket()[0]
wave_i=wavepacket()[1]
wave_con=wavepacket()[2]
x=np.arange(0,1,0.0005)
fig=plt.figure()
plt.plot(x,wave_r)
plt.title('real part')
plt.xlabel('wave_real')
plt.ylabel('distance')
plt.show()
plt.plot(x,wave_i,'m')
plt.title('image part')
plt.xlabel('wave_imag')
plt.ylabel('distance')
plt.show()
plt.plot(x,wave_con,'c')
plt.title('conj part')
plt.xlabel('wave_conj')
plt.ylabel('distance')
plt.show()



def vs():
    x=np.linspace(-2,2,401)
    v=[]
    for i in x:
        if -2<=i<=2:
            v.append(0)
        else:
            v.append(1000)
    return v
def wavefunc(e,a,b):
    v=vs()
    dx=0.01
    wave=np.zeros(401)
    wave[0]=a
    wave[-1]=b
    b=1.5
    for i in range(400):
        wave_new=2*wave[i]-wave[i-1]-(e-v[i])*dx**2*wave[i]
        if abs(wave_new)<=b:
            wave[i+1]=wave_new
        else:
            break
    return wave
def cace(c):
    last_diverge=0
    de=0.1
    e_init=e=c
    mini_de=0.005
    while abs(de)>mini_de:
        a=1
        b=1
        wave_cac=wavefunc(e,a,b)
        if np.sign(wave_cac[400])==np.sign(last_diverge):
            de=-de/2
        e=e+de
        last_diverge=sign(wave_cac[400])
   
    return wave_cac
    

